{"pageProps":{"portfolio":{"id":42,"date":"2021-02-14T15:44:38","slug":"custom-product-enquiry-react-widgets","title":"Custom Product Enquiry Widgets Developed Using React","description":"<h3>What is the main problem?</h3>\n<p>This time, the problem will not come from the client but the development approach. The client only wants a separate enquiry form for each product. These forms work like an &#8220;add to cart&#8221; functionality in an e-commerce website. But instead of adding the products to the cart, they want their customers to add the products in the global enquiry email.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/initial-enquiry-form.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">The main enquiry form was generated using </span><a class=\"editor-rtfLink\" href=\"https://contactform7.com/\" target=\"_blank\" rel=\"noopener\">Contact Form 7</a>, a contact form generator in WordPress.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/contact-form-page.jpg\" alt=\"\" /></p>\n<p>I can just create separate enquiry forms in Contact Form 7 then add them to each product. I can also customize these forms to disable the form submission and just save the submitted values into some kind of storage like the Local Storage.</p>\n<p>That would be a good solution, right? But there are features that the client wants that will just make the functionality development complicated.</p>\n<p>First, the client wants a &#8220;cart&#8221; like widget where they can see the products that were added to their enquiries. For every product that was added and removed, the &#8220;cart&#8221; like widget needs to update as well.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/inquiry-widget-header.jpg\" alt=\"\" /></p>\n<p>Another feature, although this feature was not requested by the client. I want to add a section in the main contact form where the customers can see all the products they have added, the customers can also remove a product if they want. I think adding this feature will improve the user experience.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/overall-enquiry.jpg\" alt=\"\" /></p>\n<p>I&#8217;m sure you notice what will be the issue.</p>\n<p>Each widget is separated but these widgets must communicate to each other to update their view or their UI. The widgets must share the same state so they will update in real-time.</p>\n<p>You might notice as well that these widgets are located in a different part of the website, one in single product pages, the &#8220;cart&#8221; like widget is in the main header and the overall enquiries list is on the Contact page. They don&#8217;t share the same parent DOM element.</p>\n<p>A little heads up! These widgets are built using React but if you know how React works, all the components are rendered to a parent DOM element by default.</p>\n<p>Now let us go to the next section and talk about how I built the features and came up with a solution.</p>\n<h3>How I built the application?</h3>\n<p>I&#8217;m not saying that this is the correct way of doing this kind of customization but I just want to share how I did it. I know there are lots of ways how to accomplish this. Please understand that these are just an overview and not the complete process.</p>\n<p>Let us talk about how I built each feature first and later how I connected each widget.</p>\n<h5>The enquiry forms:</h5>\n<p><span data-preserver-spaces=\"true\">All the form data was dynamically generated by the back-end. The client website was using </span><a class=\"editor-rtfLink\" href=\"https://www.advancedcustomfields.com/\" target=\"_blank\" rel=\"noopener\"><span data-preserver-spaces=\"true\">Advanced Custom Field</span></a><span data-preserver-spaces=\"true\"> plugin, a plugin that provides custom fields or data. I think it&#8217;s better and much faster to use it than to build a custom form input generator.</span><br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/acf-form-generator.jpg\" alt=\"\" /></p>\n<p>Then I used these form input data and integrate them with <a href=\"https://formik.org/\" target=\"_blank\" rel=\"noopener\">Formik</a> so that I have a dynamic form for each product.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/enquiry-selected.jpg\" alt=\"\" /></p>\n<p>These forms do not need to send something, it just needs to update the state. I used React Context and React Hooks to control the global state instead of Redux state management package. If the customer submits the form, the submitted values will be saved to the global state.</p>\n<h5>The &#8220;cart&#8221; like widget or the overview enquiry widget:</h5>\n<p>This widget was located in the main header. This widget will show the total of enquiries the customer has and also the title of the items.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/overview-enquiry-w-items.png\" alt=\"\" /></p>\n<p>Whenever a customer submits a product enquiry or removes an item, this widget will update.</p>\n<p>This widget gets its data to the global state. This widget was built also using React but in separate parent DOM element.</p>\n<h5>The overall enquiries list:</h5>\n<p>This section was added to the main contact page. Before the customers submit their message, they can review their products. They can remove product items if they want.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/overall-enquiry-list.png\" alt=\"\" /></p>\n<p>All the products that they have added will be included in the main contact form submission.</p>\n<p>This was also rendered on a different parent DOM element, and it gets its data to the same global state as well.</p>\n<h3>How the components communicate?</h3>\n<p>So the question is how I connect these three components and make them share the same global state?</p>\n<p>Well, React has a feature called <a href=\"https://reactjs.org/docs/portals.html\" target=\"_blank\" rel=\"noopener\">Portals</a>, you can create different React components and attached them to a different parent element. Basically, this portal serves as a bridge to these separated components so they can still communicate (in a way).</p>\n<p>In my case, I just created different portals by using the &#8220;createPortal&#8221; method and enclosed all the components into the context provider. By doing this, even though they are separated they will still share the global state.</p>\n<p>To be honest, I can&#8217;t remember what is the exact reason why I came up with this approach. As far as I can remember, my first solution was to depend only on every update of my global state in Local Storage.</p>\n<p>That solution was not working, I&#8217;m not sure why. When I tried testing it by adding a new product enquiry, the overview widget in the header was not updating in real-time. The overview widget will only update after the next product enquiry submission, some sort of a delayed update.</p>\n<p>Well, I have deadlines to meet, I need a better solution and Portals help me with these issues.</p>\n<h3>Limitations:</h3>\n<ul>\n<li>Form input generator was dependent on ACF.</li>\n<li>There is no remove functionality on the overview widget.</li>\n</ul>\n","techStacks":"React JS, React Context, React Hooks, Formik","excerpt":"Developed for a home-improvement company in Australia. These three separated widgets are part of their website which provides a custom product enquiry process.","featuredImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/enquiry-featured-image.jpg","previewImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/enquiry-preview-image.jpg"}},"__N_SSG":true}