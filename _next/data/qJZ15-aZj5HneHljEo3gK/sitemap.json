{"pageProps":{"allPortfolio":[{"id":92,"date":"2021-04-20T19:49:08","slug":"a-store-locator-widget-built-with-react-google-map-api","title":"A Store Locator Widget Built With React & Google Map API","description":"<h3><span data-preserver-spaces=\"true\">What is the main problem?</span></h3>\n<p><span data-preserver-spaces=\"true\">The client requires me to build a functionality that enables their customers to find affiliate retailers in Australia. The retailer locator must have some sort of filter functionalities that will help the customers to find the nearest retailers to a given area and limits the search result with the business type category. The search results must display on a Google Map.</span></p>\n<h3><span data-preserver-spaces=\"true\">Feature overview:</span></h3>\n<ul>\n<li><span data-preserver-spaces=\"true\">Integration with Google Maps</span></li>\n<li><span data-preserver-spaces=\"true\">Find the nearest retailers in a given area.</span></li>\n<li><span data-preserver-spaces=\"true\">Limit the results with the retailer&#8217;s business type.</span></li>\n<li><span data-preserver-spaces=\"true\">Find specific retailers in a given area.</span></li>\n</ul>\n<h3><span data-preserver-spaces=\"true\">How I built the application?</span></h3>\n<p><span data-preserver-spaces=\"true\">This store locator was built using the React.js library. I know this type of functionality can be done also in a vanilla javascript development approach but I want to use the flexibility of React in building widgets and apps. Another reason is it&#8217;s so easy to manage the application&#8217;s state in React. </span></p>\n<p><span data-preserver-spaces=\"true\">I used the React Context and useReducer to managed the functionality state and not Redux. I think using Redux is quite overkill for this specific widget&#8217;s functionality.</span></p>\n<p><span data-preserver-spaces=\"true\">I used the Formik package for rendering form components. I find it easy to control or manage the input fields, errors, validations, events, and form&#8217;s state when I&#8217;m using Formik.</span></p>\n<p><span data-preserver-spaces=\"true\">In terms of styling the widget, I used the Tailwind CSS to add the styles.</span></p>\n<p><span data-preserver-spaces=\"true\">I think the most complicated part of this widget was the integration of the Google Map APIs. It&#8217;s easy to show the map in the widget, the difficult part is how to show the retailer&#8217;s map pin conditionally. I need to show the retailer&#8217;s map pin that is only located in a given radius or area. </span></p>\n<p><span data-preserver-spaces=\"true\">For example, a user wants to find all the retailers within a 10 km radius. All the retailer&#8217;s map pins within this area will be visible on the map. </span></p>\n<p><span data-preserver-spaces=\"true\">To be honest, I&#8217;m not that good when it comes to Google Maps API because most of the time I&#8217;m just embedding maps to my client&#8217;s website and there is no complex customization like this one. </span></p>\n<p><span data-preserver-spaces=\"true\">I read some of the Google Maps API documentation, I tried to look for related issues that might help as well. After several searching, I came up with a helper method that I can use. Based on Google Map docs, there&#8217;s a method called &#8220;computeDistanceBetween&#8221;. Basically, this method needs the retailer&#8217;s position (latitude &amp; longitude), and also the center position of the given area. This method will return a distance value that I can use to compare with the user&#8217;s provided radius. If the value (distance) is less than or equal to the user&#8217;s provided radius, it means that the current retailer is within the given area.</span></p>\n<h3><span data-preserver-spaces=\"true\">How does the application work?</span></h3>\n<p><span data-preserver-spaces=\"true\">It&#8217;s easy to use this widget. The user can choose between searching for the nearest retailers and searching for specific retailers. They can easily switch between different forms.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/store-locator-tab.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">The Address input field is connected to the Places Library of Google Map API. This gives an auto-complete feature so whenever a user searches, a handy suggestion dropdown will show.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/places-ac.png\" alt=\"\" /></p>\n<h5>The Form for Searching Multiple Retailers:</h5>\n<p><span data-preserver-spaces=\"true\">The default form contains input fields for the Address, Business Unit, and the Radius. </span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/tab-1.jpg\" alt=\"\" /></p>\n<p><strong><span data-preserver-spaces=\"true\">Address</span></strong><span data-preserver-spaces=\"true\"> &#8211; Input for getting the address of the user. Behind the scene, this will get the latitude and longitude of that current address that will be processed to get the retailers.</span></p>\n<p><strong><span data-preserver-spaces=\"true\">Business Unit</span></strong><span data-preserver-spaces=\"true\"> &#8211; This is the retailer&#8217;s category. The users can choose between these categories to filter out the retailers that they are looking for. This is not required data, if the user didn&#8217;t choose any business unit, all retailers in that area will show.</span></p>\n<p><strong><span data-preserver-spaces=\"true\">Radius</span></strong><span data-preserver-spaces=\"true\"> &#8211; This is responsible for getting the area in the map that the user wants to search for. For example, the user wants to search for retailers within 25 km using the given address as the center position.</span></p>\n<p><span data-preserver-spaces=\"true\">If they are done completing the form, they can click the Search Retailers button. The map will show all the retailer&#8217;s map pins that are located in that area.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/full-store-locator.jpg\" alt=\"\" /></p>\n<h5>The Form for Searching Specific Retailers:</h5>\n<p><span data-preserver-spaces=\"true\">This form works like the default form but instead of showing all retailers in that area based on the business unit category, it will show specific retailers only. Useful for searching retailers directly. </span></p>\n<p><span data-preserver-spaces=\"true\">This form contains the same input fields except for the Business Unit field, it was replaced with the Branch Name field.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/tab-2.jpg\" alt=\"\" /></p>\n<p><strong><span data-preserver-spaces=\"true\">Branch Name</span></strong><span data-preserver-spaces=\"true\"> &#8211; This field is responsible for getting the retailer&#8217;s branch name. The keyword doesn&#8217;t need to match with the branch name exactly. If the current search matches multiple retailers, the retailer&#8217;s map pins will show on the map.</span></p>\n<h5>The Map:</h5>\n<p><span data-preserver-spaces=\"true\">Whenever a user searches for retailers, all the map pins in a given area will show on the map. If a user clicks a pin, a custom info window will show at the bottom left corner of the map. This info window will show the details about the currently selected map pin.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/sample-search-result.jpg\" alt=\"\" /></p>\n<h5>The Reset Button:</h5>\n<p><span data-preserver-spaces=\"true\">If the user wants to do a new search, they can just click the Reset button to restore the widget to its default state.</span></p>\n<h3>Limitations:</h3>\n<ul>\n<li><span data-preserver-spaces=\"true\">The widget doesn&#8217;t integrate with Geolocation API. The Geolocation API can help the user to get their location automatically.</span></li>\n</ul>\n","techStacks":"React JS, React Context, React Hooks, Formik, Google Map API, Tailwind CSS","excerpt":"A custom widget developed for a home remodeling company in Australia. Helps to add a store locator to the client's website. This widget enables the customer to find the nearest retailers in a given area.","featuredImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/store-locator-featured-image.jpg","previewImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/04/store-locator-preview-image.jpg"},{"id":27,"date":"2021-03-30T13:31:11","slug":"polling-app-built-using-react-and-redux","title":"A Polling Application for Cakes Built Using React JS & Redux","description":"<h3><span data-preserver-spaces=\"true\">What is the main problem?</span></h3>\n<p><span data-preserver-spaces=\"true\">The </span><strong><span data-preserver-spaces=\"true\">main problem</span></strong><span data-preserver-spaces=\"true\"> that the client wants to fix is that they need a fair decision on what set of cakes they are going to bake every week. So our goal is to build something that can help them decide by letting each staff vote.</span></p>\n<h3><span data-preserver-spaces=\"true\">How I built the application?</span></h3>\n<p><span data-preserver-spaces=\"true\">I developed this polling app using React JS by using the create-react-app package. I used the React Router for page routing. Although it looks like a simple application, I still need a good state management package to help me manage the application state. I used the Redux state management package for this. I love using the Redux dev tools, it gives me a good insight into my app&#8217;s process and state.</span></p>\n<p><span data-preserver-spaces=\"true\">The client is currently using WordPress for their business. So I just need to integrate the custom app into their current platform. Luckily, WordPress support REST API so I used that for the application data. </span></p>\n<p><span data-preserver-spaces=\"true\">I think planning your CSS is still important when it comes to developing your applications and websites. Other than creating custom CSS for some projects, I&#8217;m using the Bootstrap CSS framework if I&#8217;m building custom websites. But since the Tailwind CSS is becoming popular, I used it for this project.</span></p>\n<h3><span data-preserver-spaces=\"true\">Feature overview:</span></h3>\n<ul>\n<li><span data-preserver-spaces=\"true\">Polling capability</span></li>\n<li><span data-preserver-spaces=\"true\">Limited time for polling</span></li>\n<li><span data-preserver-spaces=\"true\">Sorted results</span></li>\n<li><span data-preserver-spaces=\"true\">Restricted actions for specific user roles</span></li>\n<li><span data-preserver-spaces=\"true\">Authentication</span></li>\n<li><span data-preserver-spaces=\"true\">Mobile-ready</span></li>\n</ul>\n<h3><span data-preserver-spaces=\"true\">How does the application work?</span></h3>\n<p><span data-preserver-spaces=\"true\">I designed the application to make it easier to use. I&#8217;m always assuming that users that will use the application are not tech-savvy. </span></p>\n<p><span data-preserver-spaces=\"true\">Before the staff can join the poll, a user with an administrator role needs to add a poll, he/she can add duration and a title for the current poll. </span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/adding-of-poll.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">A user with no administrator role can only join a poll or view the poll&#8217;s results.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/non-admin.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">After an administrator adds a poll, this poll is now listed on the Poll&#8217;s main menu.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/poll-menu.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">Then the users or the selected staff can now start voting for their preferred cakes in the single poll menu. They can vote for a limited amount of time only. If the time expires, clicking on the heart button and form submission will be disabled. </span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/single-poll-page.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">Also, there&#8217;s a maximum number of cakes that they can select.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/limited-cakes.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">The users can view the results by going to the Results page.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/sample-results.jpg\" alt=\"\" /></p>\n<h3><strong><span data-preserver-spaces=\"true\">Limitations:</span></strong></h3>\n<ul>\n<li><span data-preserver-spaces=\"true\">Some of the administrator actions like adding users and adding cakes are still dependent on WordPress. If the admin needs to add a cake, they need to go to the WP admin to add it. Same for the users, adding new staff need to be performed in the WP admin.</span></li>\n<li><span data-preserver-spaces=\"true\">No in-app user registration functionality.</span></li>\n</ul>\n","techStacks":"React JS, React Router, Redux, WP REST API, Tailwind CSS","excerpt":"Originally developed for a bakery business located in Germany. This single-page application was a part of their small system that helps the client to manage their business.","featuredImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/polling-featured-image.jpg","previewImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/polling-preview-image.jpg"},{"id":42,"date":"2021-02-14T15:44:38","slug":"custom-product-enquiry-react-widgets","title":"Custom Product Enquiry Widgets Developed Using React","description":"<h3>What is the main problem?</h3>\n<p>This time, the problem will not come from the client but the development approach. The client only wants a separate enquiry form for each product. These forms work like an &#8220;add to cart&#8221; functionality in an e-commerce website. But instead of adding the products to the cart, they want their customers to add the products in the global enquiry email.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/initial-enquiry-form.jpg\" alt=\"\" /></p>\n<p><span data-preserver-spaces=\"true\">The main enquiry form was generated using </span><a class=\"editor-rtfLink\" href=\"https://contactform7.com/\" target=\"_blank\" rel=\"noopener\">Contact Form 7</a>, a contact form generator in WordPress.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/contact-form-page.jpg\" alt=\"\" /></p>\n<p>I can just create separate enquiry forms in Contact Form 7 then add them to each product. I can also customize these forms to disable the form submission and just save the submitted values into some kind of storage like the Local Storage.</p>\n<p>That would be a good solution, right? But there are features that the client wants that will just make the functionality development complicated.</p>\n<p>First, the client wants a &#8220;cart&#8221; like widget where they can see the products that were added to their enquiries. For every product that was added and removed, the &#8220;cart&#8221; like widget needs to update as well.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/inquiry-widget-header.jpg\" alt=\"\" /></p>\n<p>Another feature, although this feature was not requested by the client. I want to add a section in the main contact form where the customers can see all the products they have added, the customers can also remove a product if they want. I think adding this feature will improve the user experience.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/overall-enquiry.jpg\" alt=\"\" /></p>\n<p>I&#8217;m sure you notice what will be the issue.</p>\n<p>Each widget is separated but these widgets must communicate to each other to update their view or their UI. The widgets must share the same state so they will update in real-time.</p>\n<p>You might notice as well that these widgets are located in a different part of the website, one in single product pages, the &#8220;cart&#8221; like widget is in the main header and the overall enquiries list is on the Contact page. They don&#8217;t share the same parent DOM element.</p>\n<p>A little heads up! These widgets are built using React but if you know how React works, all the components are rendered to a parent DOM element by default.</p>\n<p>Now let us go to the next section and talk about how I built the features and came up with a solution.</p>\n<h3>How I built the application?</h3>\n<p>I&#8217;m not saying that this is the correct way of doing this kind of customization but I just want to share how I did it. I know there are lots of ways how to accomplish this. Please understand that these are just an overview and not the complete process.</p>\n<p>Let us talk about how I built each feature first and later how I connected each widget.</p>\n<h5>The enquiry forms:</h5>\n<p><span data-preserver-spaces=\"true\">All the form data was dynamically generated by the back-end. The client website was using </span><a class=\"editor-rtfLink\" href=\"https://www.advancedcustomfields.com/\" target=\"_blank\" rel=\"noopener\"><span data-preserver-spaces=\"true\">Advanced Custom Field</span></a><span data-preserver-spaces=\"true\"> plugin, a plugin that provides custom fields or data. I think it&#8217;s better and much faster to use it than to build a custom form input generator.</span><br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/acf-form-generator.jpg\" alt=\"\" /></p>\n<p>Then I used these form input data and integrate them with <a href=\"https://formik.org/\" target=\"_blank\" rel=\"noopener\">Formik</a> so that I have a dynamic form for each product.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/enquiry-selected.jpg\" alt=\"\" /></p>\n<p>These forms do not need to send something, it just needs to update the state. I used React Context and React Hooks to control the global state instead of Redux state management package. If the customer submits the form, the submitted values will be saved to the global state.</p>\n<h5>The &#8220;cart&#8221; like widget or the overview enquiry widget:</h5>\n<p>This widget was located in the main header. This widget will show the total of enquiries the customer has and also the title of the items.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/overview-enquiry-w-items.png\" alt=\"\" /></p>\n<p>Whenever a customer submits a product enquiry or removes an item, this widget will update.</p>\n<p>This widget gets its data to the global state. This widget was built also using React but in separate parent DOM element.</p>\n<h5>The overall enquiries list:</h5>\n<p>This section was added to the main contact page. Before the customers submit their message, they can review their products. They can remove product items if they want.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/overall-enquiry-list.png\" alt=\"\" /></p>\n<p>All the products that they have added will be included in the main contact form submission.</p>\n<p>This was also rendered on a different parent DOM element, and it gets its data to the same global state as well.</p>\n<h3>How the components communicate?</h3>\n<p>So the question is how I connect these three components and make them share the same global state?</p>\n<p>Well, React has a feature called <a href=\"https://reactjs.org/docs/portals.html\" target=\"_blank\" rel=\"noopener\">Portals</a>, you can create different React components and attached them to a different parent element. Basically, this portal serves as a bridge to these separated components so they can still communicate (in a way).</p>\n<p>In my case, I just created different portals by using the &#8220;createPortal&#8221; method and enclosed all the components into the context provider. By doing this, even though they are separated they will still share the global state.</p>\n<p>To be honest, I can&#8217;t remember what is the exact reason why I came up with this approach. As far as I can remember, my first solution was to depend only on every update of my global state in Local Storage.</p>\n<p>That solution was not working, I&#8217;m not sure why. When I tried testing it by adding a new product enquiry, the overview widget in the header was not updating in real-time. The overview widget will only update after the next product enquiry submission, some sort of a delayed update.</p>\n<p>Well, I have deadlines to meet, I need a better solution and Portals help me with these issues.</p>\n<h3>Limitations:</h3>\n<ul>\n<li>Form input generator was dependent on ACF.</li>\n<li>There is no remove functionality on the overview widget.</li>\n</ul>\n","techStacks":"React JS, React Context, React Hooks, Formik","excerpt":"Developed for a home-improvement company in Australia. These three separated widgets are part of their website which provides a custom product enquiry process.","featuredImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/enquiry-featured-image.jpg","previewImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/02/enquiry-preview-image.jpg"},{"id":39,"date":"2021-01-30T15:36:06","slug":"digital-signage-builder-developed-on-react-and-redux","title":"A Digital Signage Builder Developed On React JS","description":"<h3>What is the main problem?</h3>\n<p>The main reason why the client wants this type of functionality is that they want to cut some operational costs. Digital signage services are quite expensive services. I developed this functionality so that the client can just create unlimited image slideshows and videos that can be displayed in their stores.</p>\n<h3>How I built the application?</h3>\n<p>This digital signage builder was divided into two parts; the back-end part, and the front-facing of the digital signage.</p>\n<h5>The Back-end &#8211; Signage Settings:</h5>\n<p>The back-end part was developed using React JS for the settings&#8217; user interface.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/initial-settings.jpg\" alt=\"\" /></p>\n<p>I didn&#8217;t use the create-react-app package to develop the Settings UI, because of its default configurations. The reason for this is because when a create-react-app initiates the build process, it will export a lot of files (js, CSS, assets, etc.) which I don&#8217;t like for this task. It will just add some more configurations when building the entire plugin.</p>\n<p><span data-preserver-spaces=\"true\">What I need are just </span><strong><span data-preserver-spaces=\"true\">a single </span></strong><span data-preserver-spaces=\"true\">script &amp; stylesheet files that contain all the customization and logic of the app. I can just include these files in the settings area when needed. </span></p>\n<p><span data-preserver-spaces=\"true\">To accomplish this goal, I need a custom Webpack setup and configuration. This custom configuration will give me control over where to export my files and use some of the Webpack plugins.</span></p>\n<p><span data-preserver-spaces=\"true\">Now let&#8217;s talk about the application&#8217;s state. As always, I used Redux to manage the state of the app. It was easy to change some settings by controlling the global state.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/changed-settings.jpg\" alt=\"\" /></p>\n<h5>The Front-end:</h5>\n<p>This part of the signage builder is responsible for the view only, so I just need a simple React setup. Although create-react-app is a good choice for this, I still didn&#8217;t use it. I built a custom setup and this time I used the Parcel bundler instead of Webpack. I want to try Parcel not because it was gaining popularity at that time, but I want to see if it&#8217;s much simpler to use than Webpack. So far for this project, the configuration is much less compare to Webpack.</p>\n<p>Since the front-end is for view only, I just need it to fetch data and not POSTing something back. I still used the WP REST API to fetch the signage data.</p>\n<h3></h3>\n<h3>Feature overview:</h3>\n<ul>\n<li>Three media type available: Images, Vimeo videos, Self-hosted Videos</li>\n<li>WordPress Media Library integration</li>\n<li><span data-preserver-spaces=\"true\">Unlimited signages</span></li>\n<li>Add schedules &#8211; display different media types according to their schedules.</li>\n<li>Developed on a WP Plugin environment so it&#8217;s easy to share with other stores.</li>\n</ul>\n<h3>How does the application work?</h3>\n<p>Using the signage builder is simple. Since this is a WordPress plugin, the user needs to install the Digital Signage Builder plugin first to activate the functionality.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-plugin-page.jpg\" alt=\"\" /></p>\n<p>If the plugin is activated successfully, the plugin will add a custom post type to the admin area. The user can add unlimited signages.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-after-install.jpg\" alt=\"\" /></p>\n<p>If the user has added new signage, it will show the signage settings. The user needs to choose between Images, Vimeo, or Self-hosted Video media type. By default, the Image media type is selected.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/initial-settings.jpg\" alt=\"\" /></p>\n<p>The Image media type is completely integrated with the WP Media Library.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/medial-library.jpg\" alt=\"\" /></p>\n<p>The user can add schedules for each media. This will control what media to show on the front-end. The client requested this feature because they are creating signage for a whole week of operation at once. They just need to reload the digital signage in the front-end and the correct media type will be displayed on their monitors.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/add-schedule.jpg\" alt=\"\" /></p>\n<p>If all signage settings were configured properly, they can click the Publish or the Update button to save the signage. After saving it, they can go to the signage display by clicking the link at the top after the signage title.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-link.jpg\" alt=\"\" /></p>\n<p>The user will be redirected to the signage display. The media type that will be displayed depends on what media type is selected in the backend.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-front-end.jpg\" alt=\"\" /></p>\n<p>The signage display contains some basic info about each media type. Toggling fullscreen depends on each media type. For Image, there&#8217;s a Toggle Fullscreen button, while the Videos have their toggle fullscreen by default. The Edit Signage button is displayed only when an admin user was logged in.</p>\n<h3></h3>\n<h3>Limitations:</h3>\n<ul>\n<li>There is no image manipulation for the image slideshows. The image must be edited externally using image editing tools then upload the images to the builder.</li>\n<li>This plugin was not uploaded to the WordPress Plugin repository. The client just wants to use it for their business only.</li>\n</ul>\n","techStacks":"React JS, Redux, WP REST API, Webpack bundler for back-end UI, Parcel for front-end UI","excerpt":"A custom-built WordPress plugin that helps to create image slideshows and videos for a client's in-store monitor display.","featuredImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-featured-image.jpg","previewImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-preview-image.jpg"}]},"__N_SSG":true}