{"pageProps":{"portfolio":{"id":39,"date":"2021-01-30T15:36:06","slug":"digital-signage-builder-developed-on-react-and-redux","title":"A Digital Signage Builder Developed On React JS","description":"<h3>What is the main problem?</h3>\n<p>The main reason why the client wants this type of functionality is that they want to cut some operational costs. Digital signage services are quite expensive services. I developed this functionality so that the client can just create unlimited image slideshows and videos that can be displayed in their stores.</p>\n<h3>How I built the application?</h3>\n<p>This digital signage builder was divided into two parts; the back-end part, and the front-facing of the digital signage.</p>\n<h5>The Back-end &#8211; Signage Settings:</h5>\n<p>The back-end part was developed using React JS for the settings&#8217; user interface.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/initial-settings.jpg\" alt=\"\" /></p>\n<p>I didn&#8217;t use the create-react-app package to develop the Settings UI, because of its default configurations. The reason for this is because when a create-react-app initiates the build process, it will export a lot of files (js, CSS, assets, etc.) which I don&#8217;t like for this task. It will just add some more configurations when building the entire plugin.</p>\n<p><span data-preserver-spaces=\"true\">What I need are just </span><strong><span data-preserver-spaces=\"true\">a single </span></strong><span data-preserver-spaces=\"true\">script &amp; stylesheet files that contain all the customization and logic of the app. I can just include these files in the settings area when needed. </span></p>\n<p><span data-preserver-spaces=\"true\">To accomplish this goal, I need a custom Webpack setup and configuration. This custom configuration will give me control over where to export my files and use some of the Webpack plugins.</span></p>\n<p><span data-preserver-spaces=\"true\">Now let&#8217;s talk about the application&#8217;s state. As always, I used Redux to manage the state of the app. It was easy to change some settings by controlling the global state.</span></p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/changed-settings.jpg\" alt=\"\" /></p>\n<h5>The Front-end:</h5>\n<p>This part of the signage builder is responsible for the view only, so I just need a simple React setup. Although create-react-app is a good choice for this, I still didn&#8217;t use it. I built a custom setup and this time I used the Parcel bundler instead of Webpack. I want to try Parcel not because it was gaining popularity at that time, but I want to see if it&#8217;s much simpler to use than Webpack. So far for this project, the configuration is much less compare to Webpack.</p>\n<p>Since the front-end is for view only, I just need it to fetch data and not POSTing something back. I still used the WP REST API to fetch the signage data.</p>\n<h3></h3>\n<h3>Feature overview:</h3>\n<ul>\n<li>Three media type available: Images, Vimeo videos, Self-hosted Videos</li>\n<li>WordPress Media Library integration</li>\n<li><span data-preserver-spaces=\"true\">Unlimited signages</span></li>\n<li>Add schedules &#8211; display different media types according to their schedules.</li>\n<li>Developed on a WP Plugin environment so it&#8217;s easy to share with other stores.</li>\n</ul>\n<h3>How does the application work?</h3>\n<p>Using the signage builder is simple. Since this is a WordPress plugin, the user needs to install the Digital Signage Builder plugin first to activate the functionality.</p>\n<p><img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-plugin-page.jpg\" alt=\"\" /></p>\n<p>If the plugin is activated successfully, the plugin will add a custom post type to the admin area. The user can add unlimited signages.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-after-install.jpg\" alt=\"\" /></p>\n<p>If the user has added new signage, it will show the signage settings. The user needs to choose between Images, Vimeo, or Self-hosted Video media type. By default, the Image media type is selected.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/initial-settings.jpg\" alt=\"\" /></p>\n<p>The Image media type is completely integrated with the WP Media Library.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/medial-library.jpg\" alt=\"\" /></p>\n<p>The user can add schedules for each media. This will control what media to show on the front-end. The client requested this feature because they are creating signage for a whole week of operation at once. They just need to reload the digital signage in the front-end and the correct media type will be displayed on their monitors.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/add-schedule.jpg\" alt=\"\" /></p>\n<p>If all signage settings were configured properly, they can click the Publish or the Update button to save the signage. After saving it, they can go to the signage display by clicking the link at the top after the signage title.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-link.jpg\" alt=\"\" /></p>\n<p>The user will be redirected to the signage display. The media type that will be displayed depends on what media type is selected in the backend.<br />\n<img src=\"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-front-end.jpg\" alt=\"\" /></p>\n<p>The signage display contains some basic info about each media type. Toggling fullscreen depends on each media type. For Image, there&#8217;s a Toggle Fullscreen button, while the Videos have their toggle fullscreen by default. The Edit Signage button is displayed only when an admin user was logged in.</p>\n<h3></h3>\n<h3>Limitations:</h3>\n<ul>\n<li>There is no image manipulation for the image slideshows. The image must be edited externally using image editing tools then upload the images to the builder.</li>\n<li>This plugin was not uploaded to the WordPress Plugin repository. The client just wants to use it for their business only.</li>\n</ul>\n","techStacks":"React JS, Redux, WP REST API, Webpack bundler for back-end UI, Parcel for front-end UI","excerpt":"A custom-built WordPress plugin that helps to create image slideshows and videos for a client's in-store monitor display.","featuredImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-featured-image.jpg","previewImg":"https://cms.egoymagnaye.com/wp-content/uploads/2021/01/signage-preview-image.jpg"}},"__N_SSG":true}